#!/bin/bash

br="$1"

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;36m'
NC='\033[0m' # No Color

function git_branches()
{
    echo ; cd ../ ;

    for sub in *; do
        if [[ $sub == shr* ]]; then
            [[ -d "${sub}/.git" ]] || continue
            
            curr_br="git rev-parse --abbrev-ref HEAD"
            old=$(cd $sub; $curr_br);

            # Abort at:
            # 1. Empty branches
            # 2. Branches that don't exist on that repo, both local and remotely
            if [[ $br == "" || $(cd $sub; git branch -a | grep -m 1 $br | tr -d '*'' ' | sed 's/^remotes\/origin\///') != $br ]] ; then
             outputBr="$(cd $sub; $curr_br)";

            
            # Skip check out when already on branch
            elif [[ $br == $old ]] ; then   
             outputBr="$BLUE$(cd $sub; $curr_br)$NC";

            #After all checks pass, go to sub
            else   
             outputBr="$(cd $sub; git checkout $br &>/dev/null; ( [[ $($curr_br) == $br ]] && echo -n $GREEN && echo -n $($curr_br) && echo -n $NC ) ||  ( echo -n $RED && echo -n $($curr_br) && echo -n $NC ) )";
            fi

            printf "%-18s [$(echo -e $outputBr)] \n" "$sub"
        fi
    done

    echo
}

usage="
usage: $(basename "$0") [-h] [branch] 

This command switches all \"shr*\" repositories to the given branch. If no branch is passed, it shows the current branch for each repo."

br_colors="
Key to branch colors:
$(echo $GREEN)    Green $NC= successfully changed
$(echo  $BLUE)    Blue $NC= already on branch 
$(echo   $RED)    Red $NC= not changed, unstaged changes in current brance
$(echo    $NC)    No color = branch doesn't exist on repo"

while getopts ':h' option; do
  case "$option" in
    h) echo -e "$usage";
       echo -e "$br_colors";
       br="$2"
       break;
       ;;
   \?) printf "illegal option: -%s\n" "$OPTARG" >&2
       echo -e "$usage" >&2
       exit 1
       ;;
  esac
done
shift $((OPTIND - 1))


git_branches
